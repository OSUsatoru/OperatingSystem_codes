// return current and parent process's ID
pid_t getpid(void);
pid_t getppid(void);

// for understanding the process of fork
https://teratail.com/questions/229921

pid_t fork(void);
if parent:  return created child proess's ID
if child:   return 0
if error:   return -1

//The child process inherits

//The list of open file descriptors
//Current working directory
//Process group ID
//Environment variables
//Resource limits
//Settings about how to handle signals.

// wait child
pid_t wait(int *wstatus);
// returns child process ID
// wstatus stores the termination status of child

// for waitpid options
https://man7.org/linux/man-pages/man2/waitpid.2.html

pid_t waitpid(pid_t pid, int *wstatus, int options);
// if pid > 0, wait for what child whose process ID equals pid
// if pid = -1, will wait for any child process
// options
// WUNTRACED WCONTINUED
// WNOHANG: return immediately with the return value 0 if no child has exited.
// childPid = waitpid(childPid, &childStatus, WNOHANG) == 0, childPid has not terminated.

// check wstatus
// WIFEXITED(wstatus): returns true if the child was terminated normally.
// WEXITSTATUS(wstatus): return the status value the child passed to exit() if the child was terminated normally

// WIFSIGNALED(wstatus): returns true if the child was terminated abnormally.
// WTERMSIG(wstatus): return the signal number that caused the child to terminate if the child was terminated abnormally

// for exec
https://man7.org/linux/man-pages/man3/exec.3.html

// executes the file
// These return to the program that it only on error
// errir: -1
int execl(const char *pathname, const char *arg, ... /* (char  *) NULL */);
int execlp(const char *filename, const char *arg, ... /* (char  *) NULL */);
int execle(const char *pathname, const char *arg, ...  /*, (char *) NULL, char * const envp[] */);
int execv(const char *pathname, char *const argv[]);
int execvp(const char *filename, char *const argv[]);
int execve(const char *pathname, char *const argv[], char *const envp[]);

Search for executable specified as the first argument in PATH environment variable?
p at the end: Yes

l: list
v: vector

Can pass new environment as an argument?
e at the end: Yes

//  changing the environment variable in a child process does not change that variable in its parent process
#include  <stdlib.h>
// returns a pointer to its value, if not defined return NULL
char *getenv(const char *name);

// adds the variable name to the environment list with the value value
// overwrite is 0: if the variable name already exists, then the value is not changed.
// overwrite != 0: if the variable name already exists, then the value is changed.
int setenv(const char *name, const char *value, int overwrite);

// deletes the variable name from the environment list
int unsetenv(const char *name);


getpriority()
setpriority()
times()